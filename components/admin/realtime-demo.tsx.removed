"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { globalEvents, EVENTS, emitProductChange } from "@/lib/global-events"
import { Zap, Activity } from "lucide-react"

interface EventLog {
  type: string
  product: any
  timestamp: string
}

export function RealtimeDemo() {
  const [events, setEvents] = useState<EventLog[]>([])
  const [isListening, setIsListening] = useState(true)

  useEffect(() => {
    if (!isListening) return

    const unsubscribe = globalEvents.on(EVENTS.INVENTORY_CHANGED, (event) => {
      setEvents(prev => [
        {
          type: event.type,
          product: event.product,
          timestamp: new Date().toLocaleTimeString()
        },
        ...prev.slice(0, 9) // Keep only last 10 events
      ])
    })

    return unsubscribe
  }, [isListening])

  const simulateProductEvent = (type: 'added' | 'updated' | 'deleted') => {
    const mockProduct = {
      id: Math.floor(Math.random() * 1000),
      name: `Test Product ${Math.floor(Math.random() * 100)}`,
      category_id: Math.floor(Math.random() * 5) + 1,
      price: 29.99
    }

    emitProductChange(type, mockProduct)
  }

  return (
    <Card className="w-full max-w-md">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Activity className="h-5 w-5 text-green-500" />
          Real-time Updates Demo
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="flex items-center justify-between">
          <Badge variant={isListening ? "default" : "secondary"}>
            {isListening ? "ðŸŸ¢ Listening" : "ðŸ”´ Paused"}
          </Badge>
          <Button
            size="sm"
            variant="outline"
            onClick={() => setIsListening(!isListening)}
          >
            {isListening ? "Pause" : "Resume"}
          </Button>
        </div>

        <div className="grid grid-cols-3 gap-2">
          <Button
            size="sm"
            variant="outline"
            onClick={() => simulateProductEvent('added')}
            className="text-xs"
          >
            + Add
          </Button>
          <Button
            size="sm"
            variant="outline"
            onClick={() => simulateProductEvent('updated')}
            className="text-xs"
          >
            â†» Update
          </Button>
          <Button
            size="sm"
            variant="outline"
            onClick={() => simulateProductEvent('deleted')}
            className="text-xs"
          >
            Ã— Delete
          </Button>
        </div>

        <div className="space-y-2 max-h-60 overflow-y-auto">
          <h4 className="text-sm font-medium">Recent Events:</h4>
          {events.length === 0 ? (
            <p className="text-xs text-gray-500">No events yet...</p>
          ) : (
            events.map((event, index) => (
              <div
                key={index}
                className="flex items-center justify-between p-2 rounded border bg-gray-50"
              >
                <div className="flex items-center gap-2">
                  <Zap className="h-3 w-3 text-yellow-500" />
                  <span className="text-xs font-medium">
                    {event.type.toUpperCase()}
                  </span>
                </div>
                <div className="text-right">
                  <p className="text-xs text-gray-600">
                    Cat: {event.product.category_id}
                  </p>
                  <p className="text-xs text-gray-400">{event.timestamp}</p>
                </div>
              </div>
            ))
          )}
        </div>

        <div className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
          ðŸ’¡ <strong>Tip:</strong> Try adding/editing/deleting products in the Product Management tab and watch the category counts update in real-time on the Categories page!
        </div>
      </CardContent>
    </Card>
  )
}
