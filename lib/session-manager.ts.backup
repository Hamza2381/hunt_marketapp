// Session management to prevent app refreshes on browser tab switches

export class SessionManager {
  private static readonly APP_STATE_KEY = 'app_state_persistence'
  private static readonly ACTIVITY_KEY = 'user_activity_timestamp'
  private static readonly SESSION_TIMEOUT = 30 * 60 * 1000 // 30 minutes
  private static readonly ACTIVITY_TIMEOUT = 5 * 60 * 1000 // 5 minutes for activity tracking
  
  // Save current app state
  static saveAppState(state: {
    isAuthenticated: boolean
    userEmail?: string
    currentPath?: string
    timestamp: number
  }): void {
    if (typeof window === 'undefined') return
    
    try {
      sessionStorage.setItem(this.APP_STATE_KEY, JSON.stringify(state))
      this.updateActivity()
    } catch (error) {
      console.warn('Failed to save app state:', error)
    }
  }
  
  // Load app state
  static loadAppState(): {
    isAuthenticated: boolean
    userEmail?: string
    currentPath?: string
    timestamp: number
  } | null {
    if (typeof window === 'undefined') return null
    
    try {
      const stored = sessionStorage.getItem(this.APP_STATE_KEY)
      if (!stored) return null
      
      const state = JSON.parse(stored)
      
      // Check if session is expired
      if (Date.now() - state.timestamp > this.SESSION_TIMEOUT) {
        this.clearAppState()
        return null
      }
      
      return state
    } catch (error) {
      console.warn('Failed to load app state:', error)
      this.clearAppState()
      return null
    }
  }
  
  // Clear app state
  static clearAppState(): void {
    if (typeof window === 'undefined') return
    
    try {
      sessionStorage.removeItem(this.APP_STATE_KEY)
      sessionStorage.removeItem(this.ACTIVITY_KEY)
    } catch (error) {
      console.warn('Failed to clear app state:', error)
    }
  }
  
  // Update user activity timestamp
  static updateActivity(): void {
    if (typeof window === 'undefined') return
    
    try {
      sessionStorage.setItem(this.ACTIVITY_KEY, Date.now().toString())
    } catch (error) {
      console.warn('Failed to update activity:', error)
    }
  }
  
  // Check if user was recently active
  static isRecentlyActive(): boolean {
    if (typeof window === 'undefined') return false
    
    try {
      const lastActivity = sessionStorage.getItem(this.ACTIVITY_KEY)
      if (!lastActivity) return false
      
      const timeSinceActivity = Date.now() - parseInt(lastActivity)
      return timeSinceActivity < this.ACTIVITY_TIMEOUT
    } catch (error) {
      return false
    }
  }
  
  // Check if this is a tab switch vs new session
  static isTabSwitch(): boolean {
    if (typeof window === 'undefined') return false
    
    const state = this.loadAppState()
    return state !== null && this.isRecentlyActive()
  }
  
  // Prevent refresh on browser tab switches
  static preventUnnecessaryRefresh(): boolean {
    if (typeof window === 'undefined') return false
    
    // If this is a tab switch and user was recently active, prevent refresh
    if (this.isTabSwitch()) {
      console.log('Tab switch detected - preventing unnecessary refresh')
      return true
    }
    
    return false
  }
  
  // Initialize session management
  static initialize(): void {
    if (typeof window === 'undefined') return
    
    // Update activity on user interactions
    const updateActivityThrottled = this.throttle(() => {
      this.updateActivity()
    }, 30000) // Update every 30 seconds max
    
    // Track user activity
    const activityEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']
    activityEvents.forEach(event => {
      document.addEventListener(event, updateActivityThrottled, { passive: true })
    })
    
    // Handle page visibility changes
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible') {
        // Tab became visible
        this.updateActivity()
        
        // Save current state
        const currentPath = window.location.pathname
        const state = this.loadAppState()
        if (state) {
          this.saveAppState({
            ...state,
            currentPath,
            timestamp: Date.now()
          })
        }
      }
    })
    
    // Save state before page unload
    window.addEventListener('beforeunload', () => {
      const state = this.loadAppState()
      if (state) {
        this.saveAppState({
          ...state,
          timestamp: Date.now()
        })
      }
    })
  }
  
  // Throttle function
  private static throttle<T extends (...args: any[]) => any>(
    func: T,
    limit: number
  ): (...args: Parameters<T>) => void {
    let inThrottle: boolean
    return function(this: any, ...args: Parameters<T>) {
      if (!inThrottle) {
        func.apply(this, args)
        inThrottle = true
        setTimeout(() => inThrottle = false, limit)
      }
    }
  }
}

// Initialize when module loads
if (typeof window !== 'undefined') {
  SessionManager.initialize()
}