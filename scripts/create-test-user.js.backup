// Test script to create a user and verify login process
// Run with: node scripts/create-test-user.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey || !supabaseAnonKey) {
  console.error('Missing required environment variables');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

const supabaseClient = createClient(supabaseUrl, supabaseAnonKey);

async function createTestUser() {
  console.log('Creating test user...');
  
  const testEmail = 'test@example.com';
  const testPassword = 'test123456';
  const testName = 'Test User';
  
  try {
    // Step 1: Clean up any existing profiles with this email
    console.log('Cleaning up existing profiles...');
    const { error: cleanupError } = await supabaseAdmin
      .from('user_profiles')
      .delete()
      .eq('email', testEmail);
      
    if (cleanupError && cleanupError.code !== 'PGRST116') {
      console.log('Cleanup result:', cleanupError.message);
    }
    
    // Step 2: Create auth user with system email
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substr(2, 9);
    const authEmail = `user_${timestamp}_${randomId}@auth.internal`;
    
    console.log(`Creating auth user with system email: ${authEmail}`);
    
    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({
      email: authEmail,
      password: testPassword,
      email_confirm: true,
    });
    
    if (authError) {
      console.error('Auth user creation failed:', authError);
      return;
    }
    
    console.log('Auth user created with ID:', authData.user.id);
    
    // Step 3: Create profile
    const profileData = {
      id: authData.user.id,
      name: testName,
      email: testEmail,
      account_type: 'personal',
      is_admin: false,
      credit_limit: 1000,
      credit_used: 0,
      status: 'active'
    };
    
    console.log('Creating user profile...');
    
    const { error: profileError } = await supabaseAdmin
      .from('user_profiles')
      .insert(profileData);
      
    if (profileError) {
      console.error('Profile creation failed:', profileError);
      // Clean up auth user
      await supabaseAdmin.auth.admin.deleteUser(authData.user.id);
      return;
    }
    
    console.log('User profile created successfully');
    
    // Step 4: Test login process
    console.log('\n--- Testing Login Process ---');
    
    // Test the custom login API approach
    console.log('Testing custom login API...');
    
    const testLoginAPI = async () => {
      try {
        // Step 1: Find user profile by email
        const { data: profile, error: profileError } = await supabaseAdmin
          .from('user_profiles')
          .select('id, email, name, account_type, is_admin, status')
          .eq('email', testEmail)
          .eq('status', 'active')
          .single();
          
        if (profileError) {
          console.error('Profile lookup failed:', profileError);
          return false;
        }
        
        console.log('Found profile:', profile);
        
        // Step 2: Get auth user by ID
        const { data: authUser, error: authUserError } = await supabaseAdmin.auth.admin.getUserById(profile.id);
        
        if (authUserError) {
          console.error('Auth user lookup failed:', authUserError);
          return false;
        }
        
        console.log('Found auth user email:', authUser.user.email);
        
        // Step 3: Test password with auth email
        const { data: signInData, error: signInError } = await supabaseClient.auth.signInWithPassword({
          email: authUser.user.email,
          password: testPassword
        });
        
        if (signInError) {
          console.error('Password verification failed:', signInError);
          return false;
        }
        
        console.log('Password verification successful!');
        
        // Sign out immediately
        await supabaseClient.auth.signOut();
        
        return true;
      } catch (error) {
        console.error('Login test error:', error);
        return false;
      }
    };
    
    const loginSuccess = await testLoginAPI();
    
    if (loginSuccess) {
      console.log('\n✅ Test user created and login verified successfully!');
      console.log(`Test credentials:`);
      console.log(`Email: ${testEmail}`);
      console.log(`Password: ${testPassword}`);
      console.log(`Auth Email: ${authEmail}`);
    } else {
      console.log('\n❌ Login test failed');
    }
    
    // Step 5: Create admin user as well
    console.log('\n--- Creating Admin User ---');
    
    const adminEmail = 'admin@bizmart.com';
    const adminPassword = 'admin123';
    const adminName = 'Admin User';
    
    // Clean up existing admin profiles
    await supabaseAdmin
      .from('user_profiles')
      .delete()
      .eq('email', adminEmail);
    
    // Create admin auth user
    const adminTimestamp = Date.now();
    const adminRandomId = Math.random().toString(36).substr(2, 9);
    const adminAuthEmail = `admin_${adminTimestamp}_${adminRandomId}@auth.internal`;
    
    const { data: adminAuthData, error: adminAuthError } = await supabaseAdmin.auth.admin.createUser({
      email: adminAuthEmail,
      password: adminPassword,
      email_confirm: true,
    });
    
    if (adminAuthError) {
      console.error('Admin auth user creation failed:', adminAuthError);
      return;
    }
    
    // Create admin profile
    const adminProfileData = {
      id: adminAuthData.user.id,
      name: adminName,
      email: adminEmail,
      account_type: 'business',
      company_name: 'BizMart Admin',
      is_admin: true,
      credit_limit: 0,
      credit_used: 0,
      status: 'active'
    };
    
    const { error: adminProfileError } = await supabaseAdmin
      .from('user_profiles')
      .insert(adminProfileData);
      
    if (adminProfileError) {
      console.error('Admin profile creation failed:', adminProfileError);
      await supabaseAdmin.auth.admin.deleteUser(adminAuthData.user.id);
      return;
    }
    
    console.log('✅ Admin user created successfully!');
    console.log(`Admin credentials:`);
    console.log(`Email: ${adminEmail}`);
    console.log(`Password: ${adminPassword}`);
    
  } catch (error) {
    console.error('Error creating test user:', error);
  }
}

createTestUser();
